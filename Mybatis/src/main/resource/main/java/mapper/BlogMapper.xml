<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="main.java.mapper.BlogMapper">
    <!-- #{}和${}区别
        #{}:以预编译的形式将参数设置到sql语句中;PreparedStatement;防止SQL注入
        ${}:取出的值直接拼装在sql语句中，会有安全问题
        大多数情况，我们取参数的值都应该用#{}

        原生jdbc不支持占位符的地方我们就可以使用${}进行取值
        比如分表：按照年份分表
            select * from ${year}_salary where xxx
            select * from tbl_employee order by ${f_name} ${order}
     -->
    <!-- 两个内置参数
        _parameter:代表整个参数
            单个参数：_parameter就是这个参数
            多个参数：参数会被封装为一个map；_parameter就是代表这个map

        _databaseId：如果配置了databaseIdProvider标签，_databaseId就是代表当前数据库的别名如mysql、oracle等
    -->
    <!-- cache 二级缓存
        eviction：缓存的回收机制
            LRU-最近最少使用，默认回收机制
            FIFO-先进先出
            SOFT-软引用：移除基于垃圾回收器状态和软引用规则的对象
            WEAK-弱引用：更积极地移除基于垃圾回收器状态和弱引用规则的对象
        flushInterval：缓存刷新间隔，默认不清空，单位：毫秒
        readOnly：是否只读
            true：只读，mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据
                    mybatis为了加快速度，直接将数据在缓存中的引用交给用户。不安全，速度快
            false：非只读，mybatis觉得获取的数据可能被修改
                    mybatis会利用序列化&反序列化的技术克隆一份新的数据。安全，速度相对慢
        size：缓存存放多少元素
        type：指定自定义缓存的全类名，实现Cache接口
    -->
    <select id="selectBlog" resultType="main.java.entity.Blog">
        <!-- bind: 可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值-->
        <bind name="_name" value="'%' + name + '%'" />
        select * from Blog where id = #{id}
        <if test="name != null">
            name = #{_name}
        </if>
    </select>
</mapper>