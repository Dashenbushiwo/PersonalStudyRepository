<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!-- 组件扫描 -->
    <context:component-scan base-package="main.java" />
    <!-- 配置视图解析器:如何把handler方法返回值解析为实际的物理视图 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>
    <!-- 配置视图 BeanNameViewResolver 解析器：使用视图的名字来解析视图
         通过order属性来定义视图解析器的优先级，order值越小，优先值越高，order默认是最大值
     -->
    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <property name="order" value="100"/>
    </bean>
    <!--
        若将DispatcherServlet请求映射为/，则Spring MVC将捕获Web容器的所有请求，包括静态资源的请求。
        default-servlet-handler将在Spring MVC上下文定义一个DefaultServletHttpRequestHandler,
        它会对DispatcherServlet的请求进行筛查，如果发现是没经过映射的请求，就将该请求交由WEB应用服务器Servlet处理，
        如果不是静态资源的请求，才有DispatcherServlet继续处理
    -->
    <mvc:default-servlet-handler />

    <!--
        <mvc:annotation-driven />会自动注册
        RequestMappingHandlerMapping、RequestMappingHandlerAdapter与ExceptionHandlerExceptionResolver三个bean
        还将提供一下支持：
        - 支持ConversionService
        - 支持@NumberFormat annotation、@DateTimeFormat注解完成数据类型的格式化
        - 支持使用@Valid注解对JavaBean实例进行JSR 303验证
        - 支持使用@RequestBody和ResponseBody注解
     -->
    <mvc:annotation-driven />
    <!-- 注意:配置了conversionService，DateTimeFormat注解将不生效 -->
<!--    <mvc:annotation-driven conversion-service="conversionService" />-->

    <!-- 配置ConversionService -->
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <ref bean="addressConvert" />
            </set>
        </property>
    </bean>

    <!-- 配置MultipartResolver -->
    <bean id="mu" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8" />
        <property name="maxUploadSize" value="10240000" />
    </bean>

    <!-- 配置拦截器
         配置了多个拦截器：先按顺序执行preHandle，再逆序执行postHandle，再逆序执行afterCompletion
     -->
    <mvc:interceptors>
        <bean class="main.java.interceptor.HelloInterceptor" />
        <!-- 配置拦截器(不)作用的路径 -->
<!--        <mvc:interceptor>-->
<!--            <mvc:mapping path="/"/>-->
<!--            <bean class="main.java.interceptor.HelloInterceptor" />-->
<!--        </mvc:interceptor>-->
    </mvc:interceptors>

    <!-- 配置使用SimpleMappingExceptionResolver来映射异常 -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionAttribute" value="ex" />
        <property name="exceptionMappings">
            <props>
                <!-- 异常及异常转到的页面 -->
                <prop key="java.lang.ArrayIndexOutOfBoundsException">error</prop>
            </props>
        </property>
    </bean>
</beans>